{"version":3,"sources":["proto_change_detector.js"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/proto_change_detector.js","sourcesContent":["import {isPresent, isBlank, BaseException, Type, isString} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {\n  AccessMember,\n  Assignment,\n  AST,\n  ASTWithSource,\n  AstVisitor,\n  Binary,\n  Chain,\n  Conditional,\n  Pipe,\n  FunctionCall,\n  ImplicitReceiver,\n  Interpolation,\n  KeyedAccess,\n  LiteralArray,\n  LiteralMap,\n  LiteralPrimitive,\n  MethodCall,\n  PrefixNot\n  } from './parser/ast';\n\nimport {ChangeRecord, ChangeDispatcher, ChangeDetector} from './interfaces';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {DynamicChangeDetector} from './dynamic_change_detector';\nimport {ChangeDetectorJITGenerator} from './change_detection_jit_generator';\nimport {PipeRegistry} from './pipes/pipe_registry';\n\nimport {coalesce} from './coalesce';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_LOCAL,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_BINDING_PIPE,\n  RECORD_TYPE_INTERPOLATE\n  } from './proto_record';\n\nexport class ProtoChangeDetector  {\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null){}\n  instantiate(dispatcher:any, bindingRecords:List, variableBindings:List, directiveMemento:List):ChangeDetector{\n    return null;\n  }\n}\n\nexport class BindingRecord {\n  ast:AST;\n  bindingMemento:any;\n  directiveMemento:any;\n\n  constructor(ast:AST, bindingMemento:any, directiveMemento:any) {\n    this.ast = ast;\n    this.bindingMemento = bindingMemento;\n    this.directiveMemento = directiveMemento;\n  }\n}\n\nexport class DynamicProtoChangeDetector extends ProtoChangeDetector {\n  _pipeRegistry:PipeRegistry;\n  _records:List<ProtoRecord>;\n\n  constructor(pipeRegistry:PipeRegistry) {\n    super();\n    this._pipeRegistry = pipeRegistry;\n  }\n\n  instantiate(dispatcher:any, bindingRecords:List, variableBindings:List, directiveMementos:List) {\n    this._createRecordsIfNecessary(bindingRecords, variableBindings);\n    return new DynamicChangeDetector(dispatcher, this._pipeRegistry, this._records, directiveMementos);\n  }\n\n  _createRecordsIfNecessary(bindingRecords:List, variableBindings:List) {\n    if (isBlank(this._records)) {\n      var recordBuilder = new ProtoRecordBuilder();\n      ListWrapper.forEach(bindingRecords, (r) => {\n        recordBuilder.addAst(r.ast, r.bindingMemento, r.directiveMemento, variableBindings);\n      });\n      this._records = coalesce(recordBuilder.records);\n    }\n  }\n}\n\nvar _jitProtoChangeDetectorClassCounter:number = 0;\nexport class JitProtoChangeDetector extends ProtoChangeDetector {\n  _factory:Function;\n  _pipeRegistry;\n\n  constructor(pipeRegistry) {\n    super();\n    this._pipeRegistry = pipeRegistry;\n    this._factory = null;\n  }\n\n  instantiate(dispatcher:any, bindingRecords:List, variableBindings:List, directiveMementos:List) {\n    this._createFactoryIfNecessary(bindingRecords, variableBindings, directiveMementos);\n    return this._factory(dispatcher, this._pipeRegistry);\n  }\n\n  _createFactoryIfNecessary(bindingRecords:List, variableBindings:List, directiveMementos:List) {\n    if (isBlank(this._factory)) {\n      var recordBuilder = new ProtoRecordBuilder();\n      ListWrapper.forEach(bindingRecords, (r) => {\n        recordBuilder.addAst(r.ast, r.bindingMemento, r.directiveMemento, variableBindings);\n      });\n      var c = _jitProtoChangeDetectorClassCounter++;\n      var records = coalesce(recordBuilder.records);\n      var typeName = `ChangeDetector${c}`;\n      this._factory = new ChangeDetectorJITGenerator(typeName, records, directiveMementos).generate();\n    }\n  }\n}\n\nclass ProtoRecordBuilder {\n  records:List<ProtoRecord>;\n\n  constructor() {\n    this.records = [];\n  }\n\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null, variableBindings:List = null) {\n    var last = ListWrapper.last(this.records);\n    if (isPresent(last) && last.directiveMemento == directiveMemento) {\n      last.lastInDirective = false;\n    }\n\n    var pr = _ConvertAstIntoProtoRecords.convert(ast, bindingMemento, directiveMemento, this.records.length, variableBindings);\n    if (! ListWrapper.isEmpty(pr)) {\n      var last = ListWrapper.last(pr);\n      last.lastInBinding = true;\n      last.lastInDirective = true;\n\n      this.records = ListWrapper.concat(this.records, pr);\n    }\n  }\n}\n\nclass _ConvertAstIntoProtoRecords {\n  protoRecords:List;\n  bindingMemento:any;\n  directiveMemento:any;\n  variableBindings:List;\n  contextIndex:number;\n  expressionAsString:string;\n\n  constructor(bindingMemento:any, directiveMemento:any, contextIndex:number, expressionAsString:string, variableBindings:List) {\n    this.protoRecords = [];\n    this.bindingMemento = bindingMemento;\n    this.directiveMemento = directiveMemento;\n    this.contextIndex = contextIndex;\n    this.expressionAsString = expressionAsString;\n    this.variableBindings = variableBindings;\n  }\n\n  static convert(ast:AST, bindingMemento:any, directiveMemento:any, contextIndex:number, variableBindings:List) {\n    var c = new _ConvertAstIntoProtoRecords(bindingMemento, directiveMemento, contextIndex, ast.toString(), variableBindings);\n    ast.visit(c);\n    return c.protoRecords;\n  }\n\n  visitImplicitReceiver(ast:ImplicitReceiver) {\n    return 0;\n  }\n\n  visitInterpolation(ast:Interpolation) {\n    var args = this._visitAll(ast.expressions);\n    return this._addRecord(RECORD_TYPE_INTERPOLATE, \"interpolate\", _interpolationFn(ast.strings),\n      args, ast.strings, 0);\n  }\n\n  visitLiteralPrimitive(ast:LiteralPrimitive) {\n    return this._addRecord(RECORD_TYPE_CONST, \"literal\", ast.value, [], null, 0);\n  }\n\n  visitAccessMember(ast:AccessMember) {\n    var receiver = ast.receiver.visit(this);\n    if (isPresent(this.variableBindings) && ListWrapper.contains(this.variableBindings, ast.name)) {\n      return this._addRecord(RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);\n    } else {\n      return this._addRecord(RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);\n    }\n  }\n\n  visitMethodCall(ast:MethodCall) {;\n    var receiver = ast.receiver.visit(this);\n    var args = this._visitAll(ast.args);\n    if (isPresent(this.variableBindings) && ListWrapper.contains(this.variableBindings, ast.name)) {\n      var target = this._addRecord(RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);\n      return this._addRecord(RECORD_TYPE_INVOKE_CLOSURE, \"closure\", null, args, null, target);\n    } else {\n      return this._addRecord(RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);\n    }\n  }\n\n  visitFunctionCall(ast:FunctionCall) {\n    var target = ast.target.visit(this);\n    var args = this._visitAll(ast.args);\n    return this._addRecord(RECORD_TYPE_INVOKE_CLOSURE, \"closure\", null, args, null, target);\n  }\n\n  visitLiteralArray(ast:LiteralArray) {\n    var primitiveName = `arrayFn${ast.expressions.length}`;\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length),\n      this._visitAll(ast.expressions), null, 0);\n  }\n\n  visitLiteralMap(ast:LiteralMap) {\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys),\n      ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);\n  }\n\n  visitBinary(ast:Binary) {\n    var left = ast.left.visit(this);\n    var right = ast.right.visit(this);\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation),\n      _operationToFunction(ast.operation), [left, right], null, 0);\n  }\n\n  visitPrefixNot(ast:PrefixNot) {\n    var exp = ast.expression.visit(this)\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, \"operation_negate\",\n      ChangeDetectionUtil.operation_negate, [exp], null, 0);\n  }\n\n  visitConditional(ast:Conditional) {\n    var c = ast.condition.visit(this);\n    var t = ast.trueExp.visit(this);\n    var f = ast.falseExp.visit(this);\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, \"cond\",\n      ChangeDetectionUtil.cond, [c,t,f], null, 0);\n  }\n\n  visitPipe(ast:Pipe) {\n    var value = ast.exp.visit(this);\n    var type = ast.inBinding ? RECORD_TYPE_BINDING_PIPE : RECORD_TYPE_PIPE;\n    return this._addRecord(type, ast.name, ast.name, [], null, value);\n  }\n\n  visitKeyedAccess(ast:KeyedAccess) {\n    var obj = ast.obj.visit(this);\n    var key = ast.key.visit(this);\n    return this._addRecord(RECORD_TYPE_KEYED_ACCESS, \"keyedAccess\",\n      ChangeDetectionUtil.keyedAccess, [key], null, obj);\n  }\n\n  _visitAll(asts:List) {\n    var res = ListWrapper.createFixedSize(asts.length);\n    for (var i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  _addRecord(type, name, funcOrValue, args, fixedArgs, context) {\n    var selfIndex = ++ this.contextIndex;\n    ListWrapper.push(this.protoRecords,\n      new ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, selfIndex,\n        this.bindingMemento, this.directiveMemento, this.expressionAsString, false, false));\n    return selfIndex;\n  }\n}\n\n\nfunction _arrayFn(length:number):Function {\n  switch (length) {\n    case 0: return ChangeDetectionUtil.arrayFn0;\n    case 1: return ChangeDetectionUtil.arrayFn1;\n    case 2: return ChangeDetectionUtil.arrayFn2;\n    case 3: return ChangeDetectionUtil.arrayFn3;\n    case 4: return ChangeDetectionUtil.arrayFn4;\n    case 5: return ChangeDetectionUtil.arrayFn5;\n    case 6: return ChangeDetectionUtil.arrayFn6;\n    case 7: return ChangeDetectionUtil.arrayFn7;\n    case 8: return ChangeDetectionUtil.arrayFn8;\n    case 9: return ChangeDetectionUtil.arrayFn9;\n    default: throw new BaseException(`Does not support literal maps with more than 9 elements`);\n  }\n}\n\nfunction _mapPrimitiveName(keys:List) {\n  var stringifiedKeys = ListWrapper.join(\n    ListWrapper.map(keys, (k) => isString(k) ? `\"${k}\"` : `${k}`),\n    \", \");\n  return `mapFn([${stringifiedKeys}])`;\n}\n\nfunction _operationToPrimitiveName(operation:string):string {\n  switch(operation) {\n    case '+'  : return \"operation_add\";\n    case '-'  : return \"operation_subtract\";\n    case '*'  : return \"operation_multiply\";\n    case '/'  : return \"operation_divide\";\n    case '%'  : return \"operation_remainder\";\n    case '==' : return \"operation_equals\";\n    case '!=' : return \"operation_not_equals\";\n    case '<'  : return \"operation_less_then\";\n    case '>'  : return \"operation_greater_then\";\n    case '<=' : return \"operation_less_or_equals_then\";\n    case '>=' : return \"operation_greater_or_equals_then\";\n    case '&&' : return \"operation_logical_and\";\n    case '||' : return \"operation_logical_or\";\n    default: throw new BaseException(`Unsupported operation ${operation}`);\n  }\n}\n\nfunction _operationToFunction(operation:string):Function {\n  switch(operation) {\n    case '+'  : return ChangeDetectionUtil.operation_add;\n    case '-'  : return ChangeDetectionUtil.operation_subtract;\n    case '*'  : return ChangeDetectionUtil.operation_multiply;\n    case '/'  : return ChangeDetectionUtil.operation_divide;\n    case '%'  : return ChangeDetectionUtil.operation_remainder;\n    case '==' : return ChangeDetectionUtil.operation_equals;\n    case '!=' : return ChangeDetectionUtil.operation_not_equals;\n    case '<'  : return ChangeDetectionUtil.operation_less_then;\n    case '>'  : return ChangeDetectionUtil.operation_greater_then;\n    case '<=' : return ChangeDetectionUtil.operation_less_or_equals_then;\n    case '>=' : return ChangeDetectionUtil.operation_greater_or_equals_then;\n    case '&&' : return ChangeDetectionUtil.operation_logical_and;\n    case '||' : return ChangeDetectionUtil.operation_logical_or;\n    default: throw new BaseException(`Unsupported operation ${operation}`);\n  }\n}\n\nfunction s(v) {\n  return isPresent(v) ? `${v}` : '';\n}\n\nfunction _interpolationFn(strings:List) {\n  var length = strings.length;\n  var c0 = length > 0 ? strings[0] : null;\n  var c1 = length > 1 ? strings[1] : null;\n  var c2 = length > 2 ? strings[2] : null;\n  var c3 = length > 3 ? strings[3] : null;\n  var c4 = length > 4 ? strings[4] : null;\n  var c5 = length > 5 ? strings[5] : null;\n  var c6 = length > 6 ? strings[6] : null;\n  var c7 = length > 7 ? strings[7] : null;\n  var c8 = length > 8 ? strings[8] : null;\n  var c9 = length > 9 ? strings[9] : null;\n  switch (length - 1) {\n    case 1: return (a1) => c0 + s(a1) + c1;\n    case 2: return (a1, a2) =>  c0 + s(a1) + c1 + s(a2) + c2;\n    case 3: return (a1, a2, a3) =>  c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;\n    case 4: return (a1, a2, a3, a4) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;\n    case 5: return (a1, a2, a3, a4, a5) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;\n    case 6: return (a1, a2, a3, a4, a5, a6) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;\n    case 7: return (a1, a2, a3, a4, a5, a6, a7) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;\n    case 8: return (a1, a2, a3, a4, a5, a6, a7, a8) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;\n    case 9: return (a1, a2, a3, a4, a5, a6, a7, a8, a9) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;\n    default: throw new BaseException(`Does not support more than 9 expressions`);\n  }\n}"]}