{"version":3,"sources":["test_injector.js"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/test_lib/test_injector.js","sourcesContent":["import {bind} from 'angular2/di';\nimport {Compiler, CompilerCache} from 'angular2/src/core/compiler/compiler';\nimport {Reflector, reflector} from 'angular2/src/reflection/reflection';\nimport {Parser, Lexer, ChangeDetection, dynamicChangeDetection} from 'angular2/change_detection';\nimport {ExceptionHandler} from 'angular2/src/core/exception_handler';\nimport {TemplateLoader} from 'angular2/src/core/compiler/template_loader';\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\nimport {ShadowDomStrategy, NativeShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\nimport {XHR} from 'angular2/src/core/compiler/xhr/xhr';\nimport {XHRMock} from 'angular2/src/mock/xhr_mock';\nimport {ComponentUrlMapper} from 'angular2/src/core/compiler/component_url_mapper';\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\nimport {StyleInliner} from 'angular2/src/core/compiler/style_inliner';\nimport {CssProcessor} from 'angular2/src/core/compiler/css_processor';\n\nimport {Injector} from 'angular2/di';\n\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\nimport {FunctionWrapper} from 'angular2/src/facade/lang';\n\n/**\n * Returns the root injector bindings.\n *\n * This must be kept in sync with the _rootBindings in application.js\n *\n * @returns {*[]}\n */\nfunction _getRootBindings() {\n  return [\n    bind(Reflector).toValue(reflector),\n  ];\n}\n\n/**\n * Returns the application injector bindings.\n *\n * This must be kept in sync with _injectorBindings() in application.js\n *\n * @returns {*[]}\n */\nfunction _getAppBindings() {\n  return [\n    bind(ShadowDomStrategy).toClass(NativeShadowDomStrategy),\n    Compiler,\n    CompilerCache,\n    TemplateResolver,\n    bind(ChangeDetection).toValue(dynamicChangeDetection),\n    TemplateLoader,\n    DirectiveMetadataReader,\n    Parser,\n    Lexer,\n    ExceptionHandler,\n    bind(XHR).toClass(XHRMock),\n    ComponentUrlMapper,\n    UrlResolver,\n    StyleUrlResolver,\n    StyleInliner,\n    bind(CssProcessor).toFactory(() => new CssProcessor(null), []),\n  ];\n}\n\nexport function createTestInjector(bindings: List) {\n  var rootInjector = new Injector(_getRootBindings());\n  return rootInjector.createChild(ListWrapper.concat(_getAppBindings(), bindings));\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass, AsyncTestCompleter], (object, async) => {\n *   object.doSomething().then(() => {\n *     expect(...);\n *     async.done();\n *   });\n * })\n * ```\n *\n * Notes:\n * - injecting an `AsyncTestCompleter` allow completing async tests - this is the equivalent of\n *   adding a `done` parameter in Jasmine,\n * - inject is currently a function because of some Traceur limitation the syntax should eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @param {Array} tokens\n * @param {Function} fn\n * @return {FunctionWithParamTokens}\n */\nexport function inject(tokens: List, fn: Function) {\n  return new FunctionWithParamTokens(tokens, fn);\n}\n\nexport class FunctionWithParamTokens {\n  _tokens: List;\n  _fn: Function;\n\n  constructor(tokens: List, fn: Function) {\n    this._tokens = tokens;\n    this._fn = fn;\n  }\n\n  execute(injector: Injector) {\n    var params = ListWrapper.map(this._tokens, (t) => injector.get(t));\n    FunctionWrapper.apply(this._fn, params);\n  }\n}\n\n"]}