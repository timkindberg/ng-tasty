{"version":3,"sources":["template_resolver_mock.js"],"names":[],"mappings":"AAAA;AAAA,KAAK,iBAAiB,AAAC,CAAC,MAAK,QAAQ;sBAArC,EAAC,GAAE,YAAqB;AAAE,iCAAwB;IAAE,AAA9B,CAAC;AAAvB,WAAS,CAAT,EAAC,KAAI,CAAO,KAAG,AAAS,CAAC;CAAgC,CAAC;;;;;;WAA1D,EAAC,uCAAoB,CAAA,OAAM,AAAC,2BAAkB,CACtC,CAAA,wCAAqB,iDAA2B,CAAA,wCAAqB,GAAK,EAAC,OAAM,uCAAmB,CAAC,AAD/D,CACgE;SAD9G,EAAC,8CAAoB,CAAA,OAAM,AAAC,kCAAkB,CACtC,CAAA,+CAAqB,wDAA2B,CAAA,+CAAqB,GAAK,EAAC,OAAM,8CAAmB,CAAC,AAD/D,CACgE;AADtG,MAAE;AAAG,aAAS;AAAG,cAAU;SAAnC,EAAC,wCAAoB,CAAA,OAAM,AAAC,4BAAkB,CACtC,CAAA,yCAAqB,kDAA2B,CAAA,yCAAqB,GAAK,EAAC,OAAM,wCAAmB,CAAC,AAD/D,CACgE;AAAtG,OAAG;AAAG,YAAQ;EAEd,SAAO,EAHf,EAAC,yDAAoB,CAAA,OAAM,AAAC,0CAAkB,CACtC,CAAA,0DAAqB,mEAA2B,CAAA,0DAAqB,GAAK,EAAC,OAAM,yDAAmB,CAAC,AAD/D,CACgE;EAGtG,iBAAe,EAJvB,EAAC,kEAAoB,CAAA,OAAM,AAAC,gDAAkB,CACtC,CAAA,mEAAqB,4EAA2B,CAAA,mEAAqB,GAAK,EAAC,OAAM,kEAAmB,CAAC,AAD/D,CACgE;AAD9G,AAAI,EAAA,uBAMG,SAAM,qBAAmB,CAGlB,AAAD,CAAG;AACZ,AAVJ,gBAAc,iBAAiB,AAAC,uBAAkB,KAAK,MAAmB,CAU/D;AACP,KAAG,cAAc,EAAI,CAAA,UAAS,OAAO,AAAC,EAAC,CAAC;AAC1C,AAZsC,CAAA;AAAxC,AAAI,EAAA,6CAAoC,CAAA;AAAxC,AAAC,eAAc,YAAY,CAAC,AAAC;AAc3B,YAAU,CAAV,UAAY,SAAQ,AAAM,CAAG,CAAA,QAAO,AAAU,CAAG;AAdnD,SAAK,cAAc,WAcM,KAAG,WAAa,SAAO,CAdV,CAAA;AAelC,aAAS,IAAI,AAAC,CAAC,IAAG,cAAc,CAAG,UAAQ,CAAG,SAAO,CAAC,CAAC;EACzD;AAEA,QAAM,CAAN,UAAQ,SAAQ,AAAM;AAlBxB,SAAK,cAAc,WAkBE,KAAG,CAlBc,CAAA;AAmBlC,AAAI,MAAA,CAAA,QAAO,EAAI,CAAA,UAAS,IAAI,AAAC,CAAC,IAAG,cAAc,CAAG,UAAQ,CAAC,CAAC;AAE5D,OAAI,SAAQ,AAAC,CAAC,QAAO,CAAC,CAAG;AArB7B,WAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAsBZ,QAAO,CAtBuB,CAkBf,SAAO,CAlB4B,CAAA;IAuB3D;AAAA,AAvBJ,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CAAzB,eAAc,SAAS,AAAC,kDAAwD,KAA3D,MAyBI,UAAQ,CAzBO,CAAG,CAkBf,SAAO,CAlB4B,CAAA;EA0B7D;KApBwC,iBAAe,CALD;AADxD,KAAK,eAAe,AAAC,0DACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAaD,IAAG,IAAa,QAAO,GAbC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,sDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YAiBL,IAAG,GAjByB;EAAC,CAAC,CAAC,CAAC;AA2BrD","file":"/Users/tbosch/projects/angular2/modules/angular2/src/mock/template_resolver_mock.js","sourcesContent":["import {Map, MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\nimport {Type, isPresent} from 'angular2/src/facade/lang';\n\nimport {Template} from 'angular2/src/core/annotations/template';\nimport {TemplateResolver} from 'angular2/src/core/compiler/template_resolver';\n\nexport class MockTemplateResolver extends TemplateResolver {\n  _cmpTemplates: Map;\n\n  constructor() {\n    super();\n    this._cmpTemplates = MapWrapper.create();\n  }\n\n  setTemplate(component: Type, template: Template) {\n    MapWrapper.set(this._cmpTemplates, component, template);\n  }\n\n  resolve(component: Type): Template {\n    var override = MapWrapper.get(this._cmpTemplates, component);\n\n    if (isPresent(override)) {\n      return override;\n    }\n\n    return super.resolve(component);\n  }\n}\n"]}