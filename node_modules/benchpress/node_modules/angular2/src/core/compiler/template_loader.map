{"version":3,"sources":["template_loader.js"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/template_loader.js","sourcesContent":["import {Injectable} from 'angular2/di';\nimport {isBlank, isPresent, BaseException, stringify} from 'angular2/src/facade/lang';\nimport {Map, MapWrapper, StringMapWrapper, StringMap} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {XHR} from './xhr/xhr';\n\nimport {Template} from 'angular2/src/core/annotations/template';\n\nimport {UrlResolver} from './url_resolver';\n\n/**\n * Strategy to load component templates.\n * @publicModule angular2/angular2\n */\n@Injectable()\nexport class TemplateLoader {\n  _xhr: XHR;\n  _htmlCache: StringMap;\n  _baseUrls: Map<Type, string>;\n  _urlCache: Map<Type, string>;\n  _urlResolver: UrlResolver;\n\n  constructor(xhr: XHR, urlResolver: UrlResolver) {\n    this._xhr = xhr;\n    this._urlResolver = urlResolver;\n    this._htmlCache = StringMapWrapper.create();\n    this._baseUrls = MapWrapper.create();\n    this._urlCache = MapWrapper.create();\n  }\n\n  // TODO(vicb): union type: return an Element or a Promise<Element>\n  load(template: Template) {\n    if (isPresent(template.inline)) {\n      return DOM.createTemplate(template.inline);\n    }\n\n    if (isPresent(template.url)) {\n      var url = this.getTemplateUrl(template);\n      var promise = StringMapWrapper.get(this._htmlCache, url);\n\n      if (isBlank(promise)) {\n        promise = this._xhr.get(url).then(function (html) {\n          var template = DOM.createTemplate(html);\n          return template;\n        });\n        StringMapWrapper.set(this._htmlCache, url, promise);\n      }\n\n      return promise;\n    }\n\n    throw new BaseException('Templates should have either their url or inline property set');\n  }\n\n  setBaseUrl(template: Template, baseUrl: string) {\n    MapWrapper.set(this._baseUrls, template, baseUrl);\n    MapWrapper.delete(this._urlCache, template);\n  }\n\n  getTemplateUrl(template: Template) {\n    if (!MapWrapper.contains(this._urlCache, template)) {\n      var baseUrl = MapWrapper.get(this._baseUrls, template);\n      if (isBlank(baseUrl)) {\n        throw new BaseException('The template base URL is not set');\n      }\n      var templateUrl;\n      if (isPresent(template.url)) {\n        templateUrl = this._urlResolver.resolve(baseUrl, template.url);\n      } else {\n        templateUrl = baseUrl;\n      }\n      MapWrapper.set(this._urlCache, template, templateUrl);\n    }\n\n    return MapWrapper.get(this._urlCache, template);\n  }\n}\n"]}