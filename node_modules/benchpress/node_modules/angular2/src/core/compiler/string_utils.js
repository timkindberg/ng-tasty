"use strict";
Object.defineProperties(module.exports, {
  dashCaseToCamelCase: {get: function() {
      return dashCaseToCamelCase;
    }},
  camelCaseToDashCase: {get: function() {
      return camelCaseToDashCase;
    }},
  __esModule: {value: true}
});
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_lang__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    StringWrapper = $__1.StringWrapper,
    RegExpWrapper = $__1.RegExpWrapper;
var DASH_CASE_REGEXP = RegExpWrapper.create('-([a-z])');
var CAMEL_CASE_REGEXP = RegExpWrapper.create('([A-Z])');
function dashCaseToCamelCase(input) {
  assert.argumentTypes(input, assert.type.string);
  return assert.returnType((StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, (function(m) {
    return m[1].toUpperCase();
  }))), assert.type.string);
}
Object.defineProperty(dashCaseToCamelCase, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
function camelCaseToDashCase(input) {
  assert.argumentTypes(input, assert.type.string);
  return assert.returnType((StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, (function(m) {
    return '-' + m[1].toLowerCase();
  }))), assert.type.string);
}
Object.defineProperty(camelCaseToDashCase, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
//# sourceMappingURL=string_utils.js.map

//# sourceMappingURL=./string_utils.map