{"version":3,"sources":["proto_view_builder.js"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/core/compiler/pipeline/proto_view_builder.js","sourcesContent":["import {isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper} from 'angular2/src/facade/collection';\n\nimport {ProtoView} from '../view';\nimport {ChangeDetection} from 'angular2/change_detection';\n\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\nimport {ShadowDomStrategy} from '../shadow_dom_strategy';\n\n/**\n * Creates ProtoViews and forwards variable bindings from parent to children.\n *\n * Fills:\n * - (in parent): CompileElement#inheritedElementBinder.nestedProtoView\n * - CompileElement#inheritedProtoView\n *\n * Reads:\n * - (in parent): CompileElement#inheritedProtoView\n * - (in parent): CompileElement#variableBindings\n * - CompileElement#isViewRoot\n */\nexport class ProtoViewBuilder extends CompileStep {\n  changeDetection:ChangeDetection;\n  _shadowDomStrategy:ShadowDomStrategy;\n  constructor(changeDetection:ChangeDetection, shadowDomStrategy:ShadowDomStrategy) {\n    super();\n    this._shadowDomStrategy = shadowDomStrategy;\n    this.changeDetection = changeDetection;\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var inheritedProtoView = null;\n    if (current.isViewRoot) {\n      var protoChangeDetector = this.changeDetection.createProtoChangeDetector('dummy');\n      inheritedProtoView = new ProtoView(current.element, protoChangeDetector,\n        this._shadowDomStrategy, this._getParentProtoView(parent));\n\n      if (isPresent(parent)) {\n        if (isPresent(parent.inheritedElementBinder.nestedProtoView)) {\n          throw new BaseException('Only one nested view per element is allowed');\n        }\n        parent.inheritedElementBinder.nestedProtoView = inheritedProtoView;\n\n        // When current is a view root, the variable bindings are set to the *nested* proto view.\n        // The root view conceptually signifies a new \"block scope\" (the nested view), to which\n        // the variables are bound.\n        if (isPresent(parent.variableBindings)) {\n          MapWrapper.forEach(parent.variableBindings, (mappedName, varName) => {\n            inheritedProtoView.bindVariable(varName, mappedName);\n          });\n        }\n      }\n    } else if (isPresent(parent)) {\n      inheritedProtoView = parent.inheritedProtoView;\n    }\n\n    // The view's locals needs to have a full set of variable names at construction time\n    // in order to prevent new variables from being set later in the lifecycle. Since we don't want\n    // to actually create variable bindings for the $implicit bindings, add to the\n    // protoLocals manually.\n    if (isPresent(current.variableBindings)) {\n      MapWrapper.forEach(current.variableBindings, (mappedName, varName) => {\n        MapWrapper.set(inheritedProtoView.protoLocals, mappedName, null);\n      });\n    }\n\n    current.inheritedProtoView = inheritedProtoView;\n  }\n\n  _getParentProtoView(parent:CompileElement) {\n    return isPresent(parent) ? parent.inheritedProtoView : null;\n  }\n}\n"]}