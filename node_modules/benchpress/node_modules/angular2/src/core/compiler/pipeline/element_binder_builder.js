"use strict";
Object.defineProperties(module.exports, {
  ElementBinderBuilder: {get: function() {
      return ElementBinderBuilder;
    }},
  __esModule: {value: true}
});
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_reflection_47_reflection__,
    $__angular2_47_change_95_detection__,
    $___46__46__47_directive_95_metadata__,
    $__compile_95_step__,
    $__compile_95_element__,
    $__compile_95_control__,
    $___46__46__47_string_95_utils__,
    $___46__46__47_property_95_setter_95_factory__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    int = $__1.int,
    isPresent = $__1.isPresent,
    isBlank = $__1.isBlank;
var $__2 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    ListWrapper = $__2.ListWrapper,
    List = $__2.List,
    MapWrapper = $__2.MapWrapper,
    StringMapWrapper = $__2.StringMapWrapper;
var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = require("angular2/src/reflection/reflection"), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || {default: $__angular2_47_src_47_reflection_47_reflection__}).reflector;
var $__4 = ($__angular2_47_change_95_detection__ = require("angular2/change_detection"), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || {default: $__angular2_47_change_95_detection__}),
    Parser = $__4.Parser,
    ProtoChangeDetector = $__4.ProtoChangeDetector;
var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = require("../directive_metadata"), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || {default: $___46__46__47_directive_95_metadata__}).DirectiveMetadata;
var CompileStep = ($__compile_95_step__ = require("./compile_step"), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || {default: $__compile_95_step__}).CompileStep;
var CompileElement = ($__compile_95_element__ = require("./compile_element"), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || {default: $__compile_95_element__}).CompileElement;
var CompileControl = ($__compile_95_control__ = require("./compile_control"), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || {default: $__compile_95_control__}).CompileControl;
var dashCaseToCamelCase = ($___46__46__47_string_95_utils__ = require("../string_utils"), $___46__46__47_string_95_utils__ && $___46__46__47_string_95_utils__.__esModule && $___46__46__47_string_95_utils__ || {default: $___46__46__47_string_95_utils__}).dashCaseToCamelCase;
var setterFactory = ($___46__46__47_property_95_setter_95_factory__ = require("../property_setter_factory"), $___46__46__47_property_95_setter_95_factory__ && $___46__46__47_property_95_setter_95_factory__.__esModule && $___46__46__47_property_95_setter_95_factory__ || {default: $___46__46__47_property_95_setter_95_factory__}).setterFactory;
var ElementBinderBuilder = function ElementBinderBuilder(parser) {
  assert.argumentTypes(parser, Parser);
  $traceurRuntime.superConstructor($ElementBinderBuilder).call(this);
  this._parser = parser;
};
var $ElementBinderBuilder = ElementBinderBuilder;
($traceurRuntime.createClass)(ElementBinderBuilder, {
  process: function(parent, current, control) {
    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
    var elementBinder = null;
    var parentElementBinder = null;
    var distanceToParentBinder = this._getDistanceToParentBinder(parent, current);
    if (isPresent(parent)) {
      parentElementBinder = parent.inheritedElementBinder;
    }
    if (current.hasBindings) {
      var protoView = current.inheritedProtoView;
      var protoInjectorWasBuilt = isBlank(parent) ? true : current.inheritedProtoElementInjector !== parent.inheritedProtoElementInjector;
      var currentProtoElementInjector = protoInjectorWasBuilt ? current.inheritedProtoElementInjector : null;
      elementBinder = protoView.bindElement(parentElementBinder, distanceToParentBinder, currentProtoElementInjector, current.componentDirective, current.viewportDirective);
      current.distanceToParentBinder = 0;
      if (isPresent(current.textNodeBindings)) {
        this._bindTextNodes(protoView, current);
      }
      if (isPresent(current.propertyBindings)) {
        this._bindElementProperties(protoView, current);
      }
      if (isPresent(current.eventBindings)) {
        this._bindEvents(protoView, current);
      }
      if (isPresent(current.contentTagSelector)) {
        elementBinder.contentTagSelector = current.contentTagSelector;
      }
      var directives = current.getAllDirectives();
      this._bindDirectiveProperties(directives, current);
      this._bindDirectiveEvents(directives, current);
    } else if (isPresent(parent)) {
      elementBinder = parentElementBinder;
      current.distanceToParentBinder = distanceToParentBinder;
    }
    current.inheritedElementBinder = elementBinder;
  },
  _getDistanceToParentBinder: function(parent, current) {
    return isPresent(parent) ? parent.distanceToParentBinder + 1 : 0;
  },
  _bindTextNodes: function(protoView, compileElement) {
    MapWrapper.forEach(compileElement.textNodeBindings, (function(expression, indexInParent) {
      protoView.bindTextNode(indexInParent, expression);
    }));
  },
  _bindElementProperties: function(protoView, compileElement) {
    MapWrapper.forEach(compileElement.propertyBindings, (function(expression, property) {
      var setterFn = setterFactory(property);
      protoView.bindElementProperty(expression.ast, property, setterFn);
    }));
  },
  _bindEvents: function(protoView, compileElement) {
    MapWrapper.forEach(compileElement.eventBindings, (function(expression, eventName) {
      protoView.bindEvent(eventName, expression);
    }));
  },
  _bindDirectiveEvents: function(directives, compileElement) {
    var $__11 = this;
    assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata), compileElement, CompileElement);
    for (var directiveIndex = 0; directiveIndex < directives.length; directiveIndex++) {
      var directive = directives[directiveIndex];
      var annotation = directive.annotation;
      if (isBlank(annotation.events))
        continue;
      var protoView = compileElement.inheritedProtoView;
      StringMapWrapper.forEach(annotation.events, (function(action, eventName) {
        var expression = $__11._parser.parseAction(action, compileElement.elementDescription);
        protoView.bindEvent(eventName, expression, directiveIndex);
      }));
    }
  },
  _bindDirectiveProperties: function(directives, compileElement) {
    var $__11 = this;
    assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata), compileElement, CompileElement);
    var protoView = compileElement.inheritedProtoView;
    for (var directiveIndex = 0; directiveIndex < directives.length; directiveIndex++) {
      var directive = ListWrapper.get(directives, directiveIndex);
      var annotation = directive.annotation;
      if (isBlank(annotation.bind))
        continue;
      StringMapWrapper.forEach(annotation.bind, (function(bindConfig, dirProp) {
        var pipes = $__11._splitBindConfig(bindConfig);
        var elProp = ListWrapper.removeAt(pipes, 0);
        var bindingAst = isPresent(compileElement.propertyBindings) ? MapWrapper.get(compileElement.propertyBindings, dashCaseToCamelCase(elProp)) : null;
        if (isBlank(bindingAst)) {
          var attributeValue = MapWrapper.get(compileElement.attrs(), elProp);
          if (isPresent(attributeValue)) {
            bindingAst = $__11._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
          }
        }
        if (isPresent(bindingAst)) {
          var fullExpAstWithBindPipes = $__11._parser.addPipes(bindingAst, pipes);
          protoView.bindDirectiveProperty(directiveIndex, fullExpAstWithBindPipes, dirProp, reflector.setter(dashCaseToCamelCase(dirProp)));
        }
      }));
    }
  },
  _splitBindConfig: function(bindConfig) {
    return ListWrapper.map(bindConfig.split('|'), (function(s) {
      return s.trim();
    }));
  }
}, {}, CompileStep);
Object.defineProperty(ElementBinderBuilder, "parameters", {get: function() {
    return [[Parser]];
  }});
Object.defineProperty(ElementBinderBuilder.prototype.process, "parameters", {get: function() {
    return [[CompileElement], [CompileElement], [CompileControl]];
  }});
Object.defineProperty(ElementBinderBuilder.prototype._bindDirectiveEvents, "parameters", {get: function() {
    return [[assert.genericType(List, DirectiveMetadata)], [CompileElement]];
  }});
Object.defineProperty(ElementBinderBuilder.prototype._bindDirectiveProperties, "parameters", {get: function() {
    return [[assert.genericType(List, DirectiveMetadata)], [CompileElement]];
  }});
Object.defineProperty(ElementBinderBuilder.prototype._splitBindConfig, "parameters", {get: function() {
    return [[assert.type.string]];
  }});
//# sourceMappingURL=element_binder_builder.js.map

//# sourceMappingURL=./element_binder_builder.map