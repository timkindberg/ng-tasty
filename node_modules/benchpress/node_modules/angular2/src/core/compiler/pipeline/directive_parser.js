"use strict";
Object.defineProperties(module.exports, {
  DirectiveParser: {get: function() {
      return DirectiveParser;
    }},
  __esModule: {value: true}
});
var $__rtts_95_assert_47_rtts_95_assert__,
    $__angular2_47_src_47_facade_47_lang__,
    $__angular2_47_src_47_facade_47_collection__,
    $__angular2_47_src_47_dom_47_dom_95_adapter__,
    $___46__46__47_selector__,
    $___46__46__47_selector__,
    $___46__46__47_directive_95_metadata__,
    $___46__46__47__46__46__47_annotations_47_annotations__,
    $__compile_95_step__,
    $__compile_95_element__,
    $__compile_95_control__;
var assert = ($__rtts_95_assert_47_rtts_95_assert__ = require("rtts_assert/rtts_assert"), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || {default: $__rtts_95_assert_47_rtts_95_assert__}).assert;
var $__1 = ($__angular2_47_src_47_facade_47_lang__ = require("angular2/src/facade/lang"), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || {default: $__angular2_47_src_47_facade_47_lang__}),
    isPresent = $__1.isPresent,
    isBlank = $__1.isBlank,
    BaseException = $__1.BaseException,
    assertionsEnabled = $__1.assertionsEnabled,
    RegExpWrapper = $__1.RegExpWrapper;
var $__2 = ($__angular2_47_src_47_facade_47_collection__ = require("angular2/src/facade/collection"), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || {default: $__angular2_47_src_47_facade_47_collection__}),
    List = $__2.List,
    MapWrapper = $__2.MapWrapper;
var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = require("angular2/src/dom/dom_adapter"), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || {default: $__angular2_47_src_47_dom_47_dom_95_adapter__}).DOM;
var SelectorMatcher = ($___46__46__47_selector__ = require("../selector"), $___46__46__47_selector__ && $___46__46__47_selector__.__esModule && $___46__46__47_selector__ || {default: $___46__46__47_selector__}).SelectorMatcher;
var CssSelector = ($___46__46__47_selector__ = require("../selector"), $___46__46__47_selector__ && $___46__46__47_selector__.__esModule && $___46__46__47_selector__ || {default: $___46__46__47_selector__}).CssSelector;
var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = require("../directive_metadata"), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || {default: $___46__46__47_directive_95_metadata__}).DirectiveMetadata;
var $__7 = ($___46__46__47__46__46__47_annotations_47_annotations__ = require("../../annotations/annotations"), $___46__46__47__46__46__47_annotations_47_annotations__ && $___46__46__47__46__46__47_annotations_47_annotations__.__esModule && $___46__46__47__46__46__47_annotations_47_annotations__ || {default: $___46__46__47__46__46__47_annotations_47_annotations__}),
    DynamicComponent = $__7.DynamicComponent,
    Component = $__7.Component,
    Viewport = $__7.Viewport;
var CompileStep = ($__compile_95_step__ = require("./compile_step"), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || {default: $__compile_95_step__}).CompileStep;
var CompileElement = ($__compile_95_element__ = require("./compile_element"), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || {default: $__compile_95_element__}).CompileElement;
var CompileControl = ($__compile_95_control__ = require("./compile_control"), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || {default: $__compile_95_control__}).CompileControl;
var PROPERTY_BINDING_REGEXP = RegExpWrapper.create('^ *([^\\s\\|]+)');
var DirectiveParser = function DirectiveParser(directives) {
  assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata));
  $traceurRuntime.superConstructor($DirectiveParser).call(this);
  var selector;
  this._selectorMatcher = new SelectorMatcher();
  for (var i = 0; i < directives.length; i++) {
    var directiveMetadata = directives[i];
    selector = CssSelector.parse(directiveMetadata.annotation.selector);
    this._selectorMatcher.addSelectables(selector, directiveMetadata);
  }
};
var $DirectiveParser = DirectiveParser;
($traceurRuntime.createClass)(DirectiveParser, {process: function(parent, current, control) {
    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
    var attrs = current.attrs();
    var classList = current.classList();
    var cssSelector = new CssSelector();
    var nodeName = DOM.nodeName(current.element);
    cssSelector.setElement(nodeName);
    for (var i = 0; i < classList.length; i++) {
      cssSelector.addClassName(classList[i]);
    }
    MapWrapper.forEach(attrs, (function(attrValue, attrName) {
      cssSelector.addAttribute(attrName, attrValue);
    }));
    var isTemplateElement = DOM.isTemplateElement(current.element);
    this._selectorMatcher.match(cssSelector, (function(selector, directive) {
      current.addDirective(checkDirectiveValidity(directive, current, isTemplateElement));
    }));
  }}, {}, CompileStep);
Object.defineProperty(DirectiveParser, "parameters", {get: function() {
    return [[assert.genericType(List, DirectiveMetadata)]];
  }});
Object.defineProperty(DirectiveParser.prototype.process, "parameters", {get: function() {
    return [[CompileElement], [CompileElement], [CompileControl]];
  }});
function checkDirectiveValidity(directive, current, isTemplateElement) {
  var isComponent = directive.annotation instanceof Component || directive.annotation instanceof DynamicComponent;
  var alreadyHasComponent = isPresent(current.componentDirective);
  if (directive.annotation instanceof Viewport) {
    if (!isTemplateElement) {
      throw new BaseException("Viewport directives need to be placed on <template> elements or elements " + ("with template attribute - check " + current.elementDescription));
    } else if (isPresent(current.viewportDirective)) {
      throw new BaseException(("Only one viewport directive can be used per element - check " + current.elementDescription));
    }
  } else if (isTemplateElement) {
    throw new BaseException(("Only template directives are allowed on template elements - check " + current.elementDescription));
  } else if (isComponent && alreadyHasComponent) {
    throw new BaseException(("Multiple component directives not allowed on the same element - check " + current.elementDescription));
  }
  return directive;
}
//# sourceMappingURL=directive_parser.js.map

//# sourceMappingURL=./directive_parser.map