{
  "name": "gulp-ngcompile",
  "description": "AngularJS assembler with dependency tracking for gulp",
  "version": "0.1.3",
  "homepage": "http://github.com/ceymard/gulp-ngcompile",
  "repository": {
    "type": "git",
    "url": "git://github.com/ceymard/gulp-ngcompile"
  },
  "author": {
    "name": "Christophe Eymard",
    "email": "christophe.eymard@gmail.com"
  },
  "main": "./ngcompile.js",
  "keywords": [
    "gulpplugin",
    "angularjs"
  ],
  "dependencies": {
    "lodash": "~2.4.1",
    "gulp-util": "~2.2.5"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "gulp-ngcompile\n==============\n\nIf you have big angularjs libraries in your src/ folder and do not use them all in your application, you most likely do not want to have them all concatenated into your output script.\n\nThis gulp plugin filters a list of javascript files to output only those that are relevant to the angular application that is to be built.\n\nInstall it with `npm install --save-dev gulp-ngcompile`\n\nTo achieve this, the plugin relies on `.module('module_name', [deps])` declaration in your .js files.\n\nA `.module('app', [dep1, dep2])` statement indicates that the current file _declares_ `app` and _requires_ `dep1` and `dep2`.\n\nWhen bundling `'app'`, gulp-ngcompile will output the files containing `app`, `dep1`, `dep2` (as well as the files containing the dependencies `dep1` and `dep2` may ask for.) You can then pass this result to `concat` for instance to assemble your application.\n\nThe assembler does *not* care about where your files are and your folder structure, only about module names.\n\nSynopsis\n========\n\n`ngcompile(app_name[, options])`\n\nOptions\n=======\n\n* options.continuous: default *false*, pass *true* if the source of the pipeline is continuous (ie. provided by watch()).\n\nExample\n=======\n\n```javascript\n// .. other requires\nvar ngcompile = require('gulp-ngcompile');\n\ngulp.task('build-angular-app', function () {\n  return gulp.src('./src/**/*.js')\n    .pipe(ngcompile('app')) // app is the module we wish to assemble.\n    .pipe(concat('app.js'))\n    .pipe(gulp.dest('./build'));\n});\n```\n\nExample with bundled templates\n==============================\n\ngulp-ngcompile has a cousin, gulp-ngtemplates, that assembles templates into javascript files that use the `$templateCache` service.\n\nTo generate the .js files for the templates and assemble the application alongside the regular .js file, you may consider using the `event-stream` module to merge two different pipelines together.\n\n```javascript\n// .. other requires\nvar ngcompile = require('gulp-ngcompile');\nvar ngtemplates = require('gulp-ngtemplates');\nvar es = require('event-stream');\n\ngulp.task('build-angular-app', function () {\n  var scripts = gulp.src('./src/**/*.js');\n  var templates = gulp.src('./src/**/*.html')\n    .pipe(ngtemplates());\n    \n  return es.concat(scripts, templates)\n    .pipe(ngcompile('app')) // app is the module we wish to assemble.\n    .pipe(concat('app.js'))\n    .pipe(gulp.dest('./build'));\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ceymard/gulp-ngcompile/issues"
  },
  "_id": "gulp-ngcompile@0.1.3",
  "dist": {
    "shasum": "a35391e7a405277b827bc044dbc63ad80854c18b"
  },
  "_from": "gulp-ngcompile@^0.1.3",
  "_resolved": "https://registry.npmjs.org/gulp-ngcompile/-/gulp-ngcompile-0.1.3.tgz"
}
