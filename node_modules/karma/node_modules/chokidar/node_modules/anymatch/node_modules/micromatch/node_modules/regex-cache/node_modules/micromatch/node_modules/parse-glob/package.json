{
  "name": "parse-glob",
  "description": "Parse a glob pattern into an object of tokens.",
  "version": "2.1.1",
  "homepage": "https://github.com/jonschlinkert/parse-glob",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/parse-glob.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/parse-glob/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/jonschlinkert/parse-glob/blob/master/LICENSE"
  },
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "prepublish": "browserify -o browser.js -e index.js"
  },
  "dependencies": {
    "glob-base": "^0.1.0",
    "glob-path-regex": "^1.0.0",
    "is-glob": "^1.1.0"
  },
  "devDependencies": {
    "browserify": "^9.0.3",
    "lodash": "^3.3.1",
    "mocha": "*"
  },
  "keywords": [
    "glob",
    "match",
    "bash",
    "expand",
    "expansion",
    "expression",
    "file",
    "files",
    "filter",
    "find",
    "glob",
    "globbing",
    "globs",
    "globstar",
    "match",
    "matcher",
    "matches",
    "matching",
    "path",
    "pattern",
    "patterns",
    "regex",
    "regexp",
    "regular",
    "shell",
    "wildcard"
  ],
  "readme": "# parse-glob [![NPM version](https://badge.fury.io/js/parse-glob.svg)](http://badge.fury.io/js/parse-glob)  [![Build Status](https://travis-ci.org/jonschlinkert/parse-glob.svg)](https://travis-ci.org/jonschlinkert/parse-glob) \n\n> Parse a glob pattern into an object of tokens.\n\n**BREAKING CHANGES in 2.0** \n\n- all path-related properties are now on the `path` object\n- all boolean properties are now on the `is` object\n- adds `base` property\n\nSee the [properties](#properties) section for details.\n\n## Install with [npm](npmjs.org)\n\n```bash\nnpm i parse-glob --save\n```\n\n- parses 1,000+ glob patterns in 29ms (2.3 GHz Intel Core i7)\n- Extensive [unit tests](./test.js) (more than 1,000 lines), covering wildcards, globstars, character classes, brace patterns, extglobs, dotfiles and other complex patterns.\n\nSee the tests for [hundreds of examples](./test.js).\n\n## Usage\n\n```js\nvar parseGlob = require('parse-glob');\nparseGlob('a/b/{c,d}/*.js');\n```\n\n**Returns:**\n\n```js\n{ path:\n   { dirname: 'a/b/{c,d}/',\n     filename: '*.js',\n     basename: '*',\n     extname: '.js',\n     ext: 'js' },\n  is: { glob: true, braces: true, negated: false, globstar: false, \n    dotfile: false, dotdir: false },\n  original: 'a/b/{c,d}/*.js',\n  pattern: 'a/b/{c,d}/*.js' }\n```\n\n## Properties\n\nThe object returned by parseGlob has the following properties:\n\n- `pattern`: the glob pattern\n- `base`: when `true` is passed as the second argument, a `base` path is extracted and stripped from `pattern`. See more [below](#base-property)\n- `original`: a copy of the original, unmodified glob pattern\n- `path`: file path segments\n  + `path.dirname`: directory\n  + `path.filename`: filename, including extension\n  + `path.basename`: filename, without extension\n  + `path.extname`: file extension, with dot\n  + `path.ext`: file extension, without dot\n- `is`: an object with boolean information about the glob:\n  + `is.glob`: true if the pattern actually a glob pattern\n  + `is.negated`: true if it's a negation pattern (`!**/foo.js`)\n  + `is.globstar`: true if the pattern has a double star (`**`)\n  + `is.dotfile`: true if the pattern should match dotfiles \n  + `is.dotdir`: true if the pattern should match dot-directories (like `.git`)\n\n\n### base property\n\nThe `base` property is created by taking any leading dirname segments in the pattern that do not contain any glob symbols (`!*{}?(|)[]`). If a base cannot be extracted, the value of `base` will be an empty string.\n\n**Examples**\n\nWithout `base` defined:\n\n```js\nvar tokens = parseGlob('a/b/{c,d}/*.js');\n// tokens.base => 'undefined'\n// tokens.pattern => 'a/b/{c,d}/*.js'\n```\n\nWith `base` defined:\n\n```js\nvar tokens = parseGlob('a/b/{c,d}/*.js', true);\n// tokens.base => 'a/b'\n// tokens.pattern => '{c,d}/*.js'\n```\n\nThe resulting object would be:\n\n```js\n{ path:\n   { dirname: 'a/b/{c,d}/',\n     filename: '*.js',\n     basename: '*',\n     extname: '.js',\n     ext: 'js' },\n  is: { glob: true, negated: false, globstar: false, \n    dotfile: false, dotdir: false },\n  original: 'a/b/{c,d}/*.js',\n  pattern: '{c,d}/*.js',\n  base: 'a/b' }\n```\n\n## Related\n* [glob-base](https://github.com/jonschlinkert/glob-base): Split a glob into a base path and a pattern.\n* [glob-parent](https://github.com/es128/glob-parent): Strips glob magic from a string to provide the parent path\n* [is-glob](https://github.com/jonschlinkert/is-glob): Returns `true` if the given string looks like a glob pattern.\n* [glob-path-regex](https://github.com/regexps/glob-path-regex): Regular expression for matching the parts of glob pattern.\n* [micromatch](https://github.com/jonschlinkert/micromatch): Glob matching for javascript/node.js. A faster alternative to minimatch (10-45x faster on avg), with all the features you're used to using in your Grunt and gulp tasks.\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/parse-glob/issues)\n\n\n## Tests\nInstall dev dependencies.\n\n```bash\nnpm i -d && npm test\n```\n\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014-2015 Jon Schlinkert  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 06, 2015._\n",
  "readmeFilename": "README.md",
  "_id": "parse-glob@2.1.1",
  "dist": {
    "shasum": "0ef59d883d7249035e09e9cd156ec8e5e4f9092e"
  },
  "_from": "parse-glob@^2.1.1",
  "_resolved": "https://registry.npmjs.org/parse-glob/-/parse-glob-2.1.1.tgz"
}
