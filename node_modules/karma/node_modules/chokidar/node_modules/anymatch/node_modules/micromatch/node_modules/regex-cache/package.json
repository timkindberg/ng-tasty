{
  "name": "regex-cache",
  "description": "Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in dramatic speed improvements.",
  "version": "0.3.0",
  "homepage": "https://github.com/jonschlinkert/regex-cache",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/regex-cache.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/regex-cache/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/jonschlinkert/regex-cache/blob/master/LICENSE"
  },
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "benchmarks": "node benchmark"
  },
  "dependencies": {
    "benchmarked": "^0.1.3",
    "chalk": "^0.5.1",
    "micromatch": "^1.2.2",
    "to-key": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "*"
  },
  "keywords": [
    "cache",
    "expression",
    "regex",
    "regexp",
    "regular",
    "regular expression",
    "store",
    "to-regex"
  ],
  "readme": "# regex-cache [![NPM version](https://badge.fury.io/js/regex-cache.svg)](http://badge.fury.io/js/regex-cache)  [![Build Status](https://travis-ci.org/jonschlinkert/regex-cache.svg)](https://travis-ci.org/jonschlinkert/regex-cache) \n\n> Memoize the results of a call to the RegExp constructor, avoiding repetitious runtime compilation of the same string and options, resulting in dramatic speed improvements.\n\nRead [what this does](#what-this-does).\n\n## Install with [npm](npmjs.org)\n\n```bash\nnpm i regex-cache --save\n```\n\n## Usage\n\nWrap a function like this:\n\n```js\nvar cache = require('regex-cache');\nvar someRegex = cache(require('some-regex-lib'));\n```\n\n**Caching a regex**\n\nIf you want to cache a regex after calling `new RegExp()`, or you're requiring a module that returns a regex, wrap it with a function first: \n\n```js\nvar cache = require('regex-cache');\n\nfunction yourRegex(str, opts) {\n  // do stuff to str and opts\n  return new RegExp(str, opts.flags);\n}\n\nvar regex = cache(yourRegex);\n```\n\n### Recommendations\n\n* **Use this when no options are passed** to the function that creates the regex. Regardless of how big or small the regex is, when zero options are passed, caching will be faster than not.\n* **Do not use this when** you are passing options to create a simple regex. No matter how many options are passed, one or fifty, a simple regex will not benefit from caching.\n* However, if the logic for creating the regex is extensive (much more than the logic used in [support.js](./support.js), like with globbing, brace expansion, etc), then it might make sense to use this if options are passed.\n\n### Example benchmarks\n\n[Performance results](#benchmarks) for a random regex lib, [mentions-regex], with and without regex-cache, and no options passed:\n\n```bash\n#1: no-args passed, and defaults are used\n  with-cache.js x 9,141,988 ops/sec ±0.61% (98 runs sampled)\n  without-cache.js x 2,818,715 ops/sec ±0.48% (99 runs sampled)\n\n#2: a string is passed\n  with-cache.js x 7,479,890 ops/sec ±0.66% (95 runs sampled)\n  without-cache.js x 2,123,907 ops/sec ±0.33% (98 runs sampled)\n```\n\n## What it does\n\nIf you're using `new RegExp('foo')` instead of a regex literal, it's probably because you need to dyamically generate a regex based on user options or some other potentially changing factors. \n\nWhen your function creates a string based on user inputs and passes it to the `RegExp` constructor, regex-cache caches the results. The next time the function is called if the key of a cached regex matches the user input (or no input was given), the cached regex is returned, avoiding unnecessary runtime compilation.\n\nUsing the RegExp constructor offers a lot of flexibility, but the runtime compilation comes at a price - it's slow. Not specifically because of the call to the RegExp constructor, but **because you have to build up the string before `new RegExp()` is even called**.\n\n\n## Run tests\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm test\n```\n\n## Run benchmarks\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm run benchmarks\n```\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/regex-cache/issues)\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2015 Jon Schlinkert  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb](https://github.com/assemble/verb) on February 17, 2015._\n\n[mentions-regex]: https://github.com/regexps/mentions-regex\n",
  "readmeFilename": "README.md",
  "_id": "regex-cache@0.3.0",
  "dist": {
    "shasum": "221e317e7d16c3cb961e3ba51984a7083ab990b2"
  },
  "_from": "regex-cache@^0.3.0",
  "_resolved": "https://registry.npmjs.org/regex-cache/-/regex-cache-0.3.0.tgz"
}
